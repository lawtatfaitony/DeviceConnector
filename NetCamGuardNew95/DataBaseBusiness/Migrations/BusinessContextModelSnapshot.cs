// <auto-generated />
using System;
using DataBaseBusiness.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBaseBusiness.Migrations
{
    [DbContext(typeof(BusinessContext))]
    partial class BusinessContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DataBaseBusiness.Models.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasColumnType("varchar(95)")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory");
                });

            modelBuilder.Entity("DataBaseBusiness.Models.FtCamera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DeviceId")
                        .HasColumnName("device_id")
                        .HasColumnType("int");

                    b.Property<string>("DeviceName")
                        .HasColumnName("device_name")
                        .HasColumnType("varchar(128)")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("DeviceSerialNo")
                        .HasColumnName("device_serial_no")
                        .HasColumnType("varchar(128)")
                        .HasComment("[device_serial_no]  a label of device Identity ")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ip")
                        .HasColumnType("varchar(32)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("MaincomId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("maincom_id")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("'0'")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("name")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("''")
                        .HasComment("name of camera")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<ulong?>("OnLive")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("on_live")
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("password")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<sbyte?>("RecordStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("record_status")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'0'")
                        .HasComment("录像状态 录像中 录像停止 录像站厅中");

                    b.Property<string>("Remark")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("remark")
                        .HasColumnType("varchar(512)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("Rtsp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rtsp")
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<int>("SiteId")
                        .HasColumnName("site_id")
                        .HasColumnType("int")
                        .HasComment("所在位置");

                    b.Property<sbyte?>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'0'")
                        .HasComment("鏡頭類型: 海康 KW-1111 ,大華AXIS 等等的用途");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("update_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Username")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("username")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<sbyte?>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visible")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'1'")
                        .HasComment("state of camera, 0: valid, 1: invalid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasName("index_name");

                    b.HasIndex("Type")
                        .HasName("index_type");

                    b.HasIndex("Visible")
                        .HasName("index_visible");

                    b.ToTable("ft_camera");
                });

            modelBuilder.Entity("DataBaseBusiness.Models.FtCameraMpeg", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int>("DeviceId")
                        .HasColumnName("device_id")
                        .HasColumnType("int");

                    b.Property<int>("CameraId")
                        .HasColumnName("camera_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("EndTimestamp")
                        .HasColumnName("end_timestamp")
                        .HasColumnType("bigint")
                        .HasComment("e.g. , end_timestamp=1601019000 this value fron streamHandle::do_decode while write mp4 trailer to create new value");

                    b.Property<string>("FileFomat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("file_fomat")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("''")
                        .HasComment("文件格式")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<long>("FileSize")
                        .HasColumnName("file_size")
                        .HasColumnType("bigint")
                        .HasComment("文件大小");

                    b.Property<long>("GroupTimestamp")
                        .HasColumnName("group_timestamp")
                        .HasColumnType("bigint")
                        .HasComment("default value = 0 ; for merge by group，fill in the id(Merge GroupId),like batch product GroupId=1601018246");

                    b.Property<sbyte>("IsFormatVirified")
                        .HasColumnName("is_format_virified")
                        .HasColumnType("tinyint")
                        .HasComment("signed that Verification of the mpeg format ");

                    b.Property<ulong>("IsGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_group")
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'")
                        .HasComment("是否由多个媒体合并而来");

                    b.Property<sbyte>("IsUpload")
                        .HasColumnName("is_upload")
                        .HasColumnType("tinyint")
                        .HasComment("is_upload of ft_camera_mpeg,Uoload to cloud from device,isUploaded=1");

                    b.Property<string>("MpegFilename")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("mpeg_filename")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("''")
                        .HasComment("除了mp4扩展名的mp4文件，还可能是其他类型，例如*.flv")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<long>("StartTimestamp")
                        .HasColumnName("start_timestamp")
                        .HasColumnType("bigint")
                        .HasComment("e.g. , start_timestamp=1601018000 this value should come from generate_filename when begin to write");

                    b.Property<sbyte>("Visible")
                        .HasColumnName("visible")
                        .HasColumnType("tinyint");

                    b.HasKey("Id", "DeviceId")
                        .HasName("PRIMARY");

                    b.HasIndex("MpegFilename")
                        .HasName("index_mpeg_filename");

                    b.ToTable("ft_camera_mpeg");

                    b.HasComment("Record the generated MPEG files Merge MP4 Files by day / hours for replay or other function 設備ID(NVR ID) + record id (NVR 本地數據庫的主鍵id) 混合為此表的主鍵索引");
                });

            modelBuilder.Entity("DataBaseBusiness.Models.FtConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Config")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("config")
                        .HasColumnType("varchar(1024)")
                        .HasDefaultValueSql("''")
                        .HasComment("the detail of config")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(128)")
                        .HasComment("name of config")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("int")
                        .HasComment("受控于EnumBusiness.cs的ConfigType 1=CAMERA;2=DEVICE;可扩展其它的表");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("update_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<sbyte?>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visible")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'1'")
                        .HasComment("state of task, 0: valid, 1: invalid (暂时没什么用)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasName("index_name");

                    b.HasIndex("Visible")
                        .HasName("index_visible");

                    b.ToTable("ft_config");
                });

            modelBuilder.Entity("DataBaseBusiness.Models.FtDevice", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("device_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DeviceConfig")
                        .HasColumnName("device_config")
                        .HasColumnType("varchar(4000)")
                        .HasComment("max=4000 因应 EnumCode.SysModuleType的模块类型 面向的对象解析为JSON不同, 如果是DVR设备,则对应的JSON对象是DVR.如果是HIK面型机则对应是HIK FACE的JSON解析对象")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<int>("DeviceEntryMode")
                        .HasColumnName("device_entry_mode")
                        .HasColumnType("int")
                        .HasComment("in/out/undefined");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("device_name")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("'0'")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<string>("DeviceSerialNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("device_serial_no")
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("'0'")
                        .HasComment("设备序列号: 电脑以CPU为默认的序列号,手机app,默认的设备序列号是手机IMEI,用于登记为合法的访问设备.")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("DeviceType")
                        .HasColumnName("device_type")
                        .HasColumnType("int")
                        .HasComment("設備類型 兼容部分AttendanceMod常量,定義設備的類型. EnumBusiness.DeviceEntryMode控制int的值");

                    b.Property<ulong>("IsReverseHex")
                        .HasColumnName("is_reverse_hex")
                        .HasColumnType("bit(1)")
                        .HasComment("from card hex decimal 拍卡的16进制码是否交叉反向解析为10进制");

                    b.Property<int?>("LibId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lib_id")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'")
                        .HasComment("定義設備控制的人群");

                    b.Property<string>("LibName") 
                       .HasColumnName("lib_name")
                       .HasColumnType("varchar(128)")
                       .HasDefaultValueSql("'0'");

                    b.Property<string>("MaincomId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("maincom_id")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("'0'")
                        .HasComment("公司ID, 如果是云部储的情况下,则很有用,否则使用MainCom对象NEW一个默认值.")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<int>("SiteId")
                        .HasColumnName("site_id")
                        .HasColumnType("int")
                        .HasComment("设备所在位置(分布式结构) 未指定=0");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'")
                        .HasComment("use Enum type to dinfine the status type");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("update_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("DeviceId")
                        .HasName("PRIMARY");

                    b.HasIndex("DeviceId")
                        .HasName("device_id");

                    b.ToTable("ft_device");

                    b.HasComment("record the infomation of the  edge computing device about serial no, backend running handle,etc... 字段 device_type :EnumBusiness.DeviceEntryMode控制int的值");
                });

            modelBuilder.Entity("DataBaseBusiness.Models.FtLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LibId")
                        .HasColumnName("lib_id")
                        .HasColumnType("int")
                        .HasComment("lib-id of library");

                    b.Property<string>("MaincomId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("maincom_id")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("'0'")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(128)")
                        .HasComment("name of library")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<int?>("PersonCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("person_count")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'")
                        .HasComment("lib-id of person");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("remark")
                        .HasColumnType("varchar(512)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<sbyte?>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'0'")
                        .HasComment("0:common, 1:VIP, ...");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("update_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<sbyte?>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visible")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'1'")
                        .HasComment("state of library, 0: valid, 1: invalid");

                    b.HasKey("Id");

                    b.HasIndex("LibId")
                        .HasName("index_lib_id");

                    b.HasIndex("Name")
                        .HasName("index_name");

                    b.HasIndex("Type")
                        .HasName("index_type");

                    b.HasIndex("Visible")
                        .HasName("index_visible");

                    b.ToTable("ft_library");
                });

            modelBuilder.Entity("DataBaseBusiness.Models.FtPerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("CardNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("card_no")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("''")
                        .HasComment("identity of person")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<sbyte>("Category")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'1'")
                        .HasComment("category of person, 1: 非锁定/白名单, 0: 锁定/黑名单 范围是-128到127 默认值=1 非锁定");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("LibId")
                        .HasColumnName("lib_id")
                        .HasColumnType("int")
                        .HasComment("lib-id of person");

                    b.Property<string>("LibIdGroups")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lib_id_groups")
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("''")
                        .HasComment("所屬的多個人員群組")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("MaincomId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("maincom_id")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("'0'")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(128)")
                        .HasComment("name of person")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("OuterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("outer_id")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'0'")
                        .HasComment("outer id is from external system etc.: EmployeeId")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("Phone")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("phone")
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("''")
                        .HasComment("phone number")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("Remark")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("remark")
                        .HasColumnType("varchar(512)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<sbyte?>("Sex")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sex")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'0'")
                        .HasComment("0: unknow, 1: male, 2: femal");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("update_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<sbyte?>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visible")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'1'")
                        .HasComment("state of person, 0: valid, 1: invalid");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasName("index_category");

                    b.HasIndex("LibId")
                        .HasName("index_lib_id");

                    b.HasIndex("Visible")
                        .HasName("index_visible");

                    b.ToTable("ft_person");
                });

            modelBuilder.Entity("DataBaseBusiness.Models.FtPicture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long?>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("person_id")
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("PicClientUrl")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pic_client_url")
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("PicClientUrlBase64")
                        .HasColumnName("pic_client_url_base64")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<long?>("PicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pic_id")
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("'0'")
                        .HasComment("id of picture");

                    b.Property<string>("PicUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pic_url")
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("''")
                        .HasComment("url of picture")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("update_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<sbyte?>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visible")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'1'")
                        .HasComment("state of person, 0: valid, 1: invalid");

                    b.HasKey("Id");

                    b.HasIndex("Visible")
                        .HasName("index_visible");

                    b.ToTable("ft_picture");
                });

            modelBuilder.Entity("DataBaseBusiness.Models.FtSite", b =>
                {
                    b.Property<int>("SiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("site_id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(512)")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<int>("CameraCount")
                        .HasColumnName("camera_count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("MaincomId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("maincom_id")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("'6000014'")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("ParentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("parents_id")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("PersonCount")
                        .HasColumnName("person_count")
                        .HasColumnType("int");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnName("site_name")
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("update_date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("SiteId")
                        .HasName("PRIMARY");

                    b.ToTable("ft_site");

                    b.HasComment("位置/大厦分布式结构 Sites/Buildings");
                });

            modelBuilder.Entity("DataBaseBusiness.Models.FtTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("CameraList1")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("camera_list1")
                        .HasColumnType("varchar(1024)")
                        .HasDefaultValueSql("''")
                        .HasComment("camera list of entrance")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("CameraList2")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("camera_list2")
                        .HasColumnType("varchar(1024)")
                        .HasDefaultValueSql("''")
                        .HasComment("camera list of exit")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Interval")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("interval")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'3000'")
                        .HasComment("timer to capture a frame");

                    b.Property<string>("LibList")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("lib_list")
                        .HasColumnType("varchar(1024)")
                        .HasDefaultValueSql("''")
                        .HasComment("library list")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("MaincomId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("maincom_id")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("'0'")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(128)")
                        .HasComment("name of task")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("Plan")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("plan")
                        .HasColumnType("varchar(256)")
                        .HasDefaultValueSql("''")
                        .HasComment("the plan of task, timer to start/stop the task")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<string>("Remark")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("remark")
                        .HasColumnType("varchar(512)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySQL:Charset", "utf8mb3")
                        .HasAnnotation("MySQL:Collation", "utf8_general_ci");

                    b.Property<sbyte?>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("state")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'0'")
                        .HasComment("state of task, 0: off, 1: on");

                    b.Property<float?>("Threshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("threshold")
                        .HasColumnType("float")
                        .HasDefaultValueSql("'0.8'")
                        .HasComment("the line to judge a person is stranger");

                    b.Property<sbyte?>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'0'")
                        .HasComment("0: common,...");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("update_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<sbyte?>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visible")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'1'")
                        .HasComment("state of task, 0: valid, 1: invalid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasName("index_name");

                    b.HasIndex("State")
                        .HasName("index_state");

                    b.HasIndex("Type")
                        .HasName("index_type");

                    b.HasIndex("Visible")
                        .HasName("index_visible");

                    b.ToTable("ft_task");
                });

            modelBuilder.Entity("DataBaseBusiness.Models.FtUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("MaincomId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("maincom_id")
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("'0'")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(128)")
                        .HasComment("name of user")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("varchar(128)")
                        .HasComment("password of user, md5 encode")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("remark")
                        .HasColumnType("varchar(512)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<DateTime>("UpdateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("update_time")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<sbyte?>("Visible")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visible")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("'1'")
                        .HasComment("state of user, 0: valid, 1: invalid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasName("index_name");

                    b.HasIndex("Visible")
                        .HasName("index_visible");

                    b.ToTable("ft_user");
                });

            modelBuilder.Entity("DataBaseBusiness.Models.Language", b =>
                {
                    b.Property<string>("KeyName")
                        .HasColumnName("key_name")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<string>("EnUs")
                        .HasColumnName("en_us")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<string>("IndustryIdArr")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<string>("KeyType")
                        .HasColumnName("key_type")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<string>("MainComIdArr")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Remarks")
                        .HasColumnName("remarks")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<string>("ZhCn")
                        .HasColumnName("zh_cn")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.Property<string>("ZhHk")
                        .HasColumnName("zh_hk")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySQL:Charset", "utf8mb4")
                        .HasAnnotation("MySQL:Collation", "utf8mb4_general_ci");

                    b.HasKey("KeyName")
                        .HasName("PRIMARY");

                    b.HasIndex("KeyName")
                        .HasName("key_name_Index");

                    b.ToTable("language");
                });
#pragma warning restore 612, 618
        }
    }
}
